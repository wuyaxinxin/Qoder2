始终生效

============================================================
GitHub 权限不足 - 真实错误信息样例汇总
生成时间: 2025-10-17
============================================================

本文档展示了在实际调用GitHub MCP工具时遇到的各种权限错误信息。

============================================================
错误 1: 401 Unauthorized - 未提供认证
============================================================

【场景】
调用工具: mcp_github_search_repositories
参数: {
  "query": "python student management"
}
认证状态: 未提供GitHub Token

【完整错误响应】
HTTP/1.1 401 Unauthorized
Content-Type: application/json

{
  "message": "Bad credentials",
  "documentation_url": "https://docs.github.com/rest"
}

【错误分析】
• 错误代码: 401
• 错误类型: Unauthorized (未授权)
• 根本原因: GitHub API检测到请求中没有有效的认证凭据
• 影响范围: 无法使用任何需要认证的工具,包括:
  - 搜索仓库 (mcp_github_search_repositories)
  - 获取文件 (mcp_github_get_file_contents)
  - 创建Issue (mcp_github_create_issue)
  - 创建PR (mcp_github_create_pull_request)
  - 等所有写操作

【解决方法】
1. 访问 https://github.com/settings/tokens
2. 生成 Personal Access Token (classic)
3. 选择必要权限: repo, workflow, read:org
4. 在IDE配置中添加Token


============================================================
错误 2: 403 Forbidden - Token权限范围不足
============================================================

【场景 A: 尝试创建私有仓库】
调用工具: mcp_github_create_repository
参数: {
  "name": "my-private-repo",
  "private": true
}
Token权限: public_repo (仅公开仓库)

【完整错误响应】
HTTP/1.1 403 Forbidden
Content-Type: application/json

{
  "message": "Resource not accessible by integration",
  "documentation_url": "https://docs.github.com/rest/repos/repos#create-a-repository-for-the-authenticated-user"
}

【错误分析】
• 错误代码: 403
• 错误类型: Forbidden (禁止访问)
• 根本原因: Token具有 public_repo 权限,但创建私有仓库需要完整的 repo 权限
• 权限对比:
  ✗ 当前权限: public_repo (仅能操作公开仓库)
  ✓ 需要权限: repo (完整仓库控制,包括私有)

【解决方法】
重新生成Token,勾选 "repo" 权限(而非仅 "public_repo")


【场景 B: 尝试管理GitHub Actions】
调用工具: mcp_github_update_workflow_file
参数: {
  "owner": "myname",
  "repo": "myrepo",
  "path": ".github/workflows/ci.yml",
  "content": "..."
}
Token权限: repo (仅代码权限)

【完整错误响应】
HTTP/1.1 403 Forbidden
Content-Type: application/json

{
  "message": "Resource not accessible by integration",
  "documentation_url": "https://docs.github.com/rest/actions"
}

【错误分析】
• 根本原因: 操作工作流文件需要 workflow 权限
• 权限对比:
  ✗ 当前权限: repo
  ✓ 需要权限: repo + workflow

【解决方法】
为Token添加 "workflow" 权限


============================================================
错误 3: 403 Forbidden - API速率限制
============================================================

【场景】
连续调用多次: mcp_github_search_repositories
调用次数: 超过60次
时间范围: 1小时内
认证状态: 未认证

【完整错误响应】
HTTP/1.1 403 Forbidden
Content-Type: application/json
X-RateLimit-Limit: 60
X-RateLimit-Remaining: 0
X-RateLimit-Reset: 1697558400

{
  "message": "API rate limit exceeded for 123.45.67.89. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)",
  "documentation_url": "https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"
}

【错误分析】
• 错误代码: 403
• 错误类型: Rate Limit Exceeded (速率限制)
• 根本原因: 未认证用户每小时仅能发起60次请求
• 速率对比:
  ✗ 未认证: 60 请求/小时
  ✓ 已认证: 5,000 请求/小时
  ✓ 企业版: 15,000 请求/小时

【响应头信息】
• X-RateLimit-Limit: 60 (总限额)
• X-RateLimit-Remaining: 0 (剩余次数)
• X-RateLimit-Reset: 1697558400 (重置时间戳)

【解决方法】
1. 立即方案: 等待限制重置(每小时一次)
2. 长期方案: 使用认证Token,限额提升至5000次/小时
3. 优化方案: 使用缓存减少重复请求


============================================================
错误 4: 404 Not Found - 隐藏的权限问题
============================================================

【场景】
调用工具: mcp_github_get_file_contents
参数: {
  "owner": "private-company",
  "repo": "internal-project",
  "path": "README.md"
}
认证状态: 未提供Token 或 Token无权访问该仓库

【完整错误响应】
HTTP/1.1 404 Not Found
Content-Type: application/json

{
  "message": "Not Found",
  "documentation_url": "https://docs.github.com/rest/repos/contents#get-repository-content"
}

【错误分析】
• 错误代码: 404
• 错误类型: Not Found (未找到)
• ⚠️ 特别注意: 这个404可能有两种含义:
  1. 资源确实不存在
  2. 资源存在但你没有访问权限

• GitHub的隐私保护策略:
  对于私有资源,GitHub不会返回403,而是返回404
  目的是避免泄露私有仓库的存在信息

【判断技巧】
如果你确定仓库/文件存在,但收到404错误:
→ 很可能是权限问题,而非真的不存在
→ 需要检查Token是否有该仓库的访问权限

【解决方法】
1. 确认仓库是否确实存在
2. 检查拼写是否正确 (owner/repo/path)
3. 确认Token是否有该仓库的访问权限
4. 如果是私有仓库,确保Token有repo权限


============================================================
错误 5: 422 Unprocessable Entity - 参数验证失败
============================================================

【场景】
调用工具: mcp_github_create_issue
参数: {
  "owner": "myname",
  "repo": "myrepo",
  "title": "",  // 空标题
  "body": "issue description"
}

【完整错误响应】
HTTP/1.1 422 Unprocessable Entity
Content-Type: application/json

{
  "message": "Validation Failed",
  "errors": [
    {
      "resource": "Issue",
      "field": "title",
      "code": "missing_field"
    }
  ],
  "documentation_url": "https://docs.github.com/rest/issues/issues#create-an-issue"
}

【错误分析】
• 错误代码: 422
• 错误类型: Validation Failed (验证失败)
• 根本原因: 请求参数不符合GitHub API要求
• 具体问题: title字段不能为空

【解决方法】
检查并修正请求参数,确保符合API规范


============================================================
完整权限范围(Scopes)对照表
============================================================

GitHub Token 可以配置多种权限范围,以下是常用权限:

┌─────────────────────┬────────────────────────┬─────────────────────────┐
│  权限范围 (Scope)    │        说明            │      典型用途           │
├─────────────────────┼────────────────────────┼─────────────────────────┤
│ repo                │ 完整仓库控制(含私有)   │ 创建/修改/删除仓库      │
│ public_repo         │ 仅公开仓库访问         │ 操作公开仓库            │
│ repo:status         │ 提交状态访问           │ CI/CD集成               │
│ repo_deployment     │ 部署状态访问           │ 部署管理                │
│ delete_repo         │ 删除仓库权限           │ 仓库删除操作            │
│ workflow            │ GitHub Actions控制     │ 管理工作流              │
│ write:packages      │ 包发布权限             │ 发布到GitHub Packages   │
│ read:packages       │ 包读取权限             │ 下载私有包              │
│ admin:org           │ 完整组织管理           │ 组织设置管理            │
│ write:org           │ 组织写入权限           │ 管理组织成员            │
│ read:org            │ 组织读取权限           │ 查看组织信息            │
│ admin:public_key    │ 公钥管理               │ 管理部署密钥            │
│ gist                │ Gist访问               │ 创建/修改Gist           │
│ notifications       │ 通知访问               │ 管理通知                │
│ user                │ 用户资料更新           │ 更新个人资料            │
│ read:user           │ 读取用户资料           │ 获取用户信息            │
│ user:email          │ 访问邮箱地址           │ 获取用户邮箱            │
│ user:follow         │ 关注用户               │ 关注/取消关注           │
└─────────────────────┴────────────────────────┴─────────────────────────┘

【常用组合建议】

基础开发套餐:
  ✓ repo (仓库完整控制)
  ✓ workflow (工作流管理)
  ✓ read:org (读取组织信息)

只读访问套餐:
  ✓ public_repo (公开仓库)
  ✓ read:user (读取用户信息)
  ✓ read:org (读取组织信息)

CI/CD自动化套餐:
  ✓ repo (仓库控制)
  ✓ workflow (工作流)
  ✓ write:packages (发布包)
  ✓ repo:status (状态更新)


============================================================
降级策略 - 当Token不可用时
============================================================

当无法获取GitHub Token或Token权限不足时,可以使用以下降级方案:

【方案 1: 使用Fetch工具(无需认证)】

原计划: mcp_github_get_file_contents
  → 需要认证
  → 可能遇到401/403错误

降级为: mcp_fetch_fetch_markdown
  → 无需认证
  → 适用于公开仓库
  → 仅能获取可公开访问的内容

示例:
  # 原方案
  mcp_github_get_file_contents({
    owner: "python",
    repo: "cpython",
    path: "README.rst"
  })
  
  # 降级方案
  mcp_fetch_fetch_markdown({
    url: "https://github.com/python/cpython/blob/main/README.rst"
  })


【方案 2: 本地缓存】

实现思路:
  1. 成功获取数据后保存到本地JSON文件
  2. 后续请求先检查缓存
  3. 缓存过期或不存在时才调用API
  4. 减少API调用次数,避免速率限制


【方案 3: 批量操作优化】

问题: 需要获取100个仓库的信息,会超过速率限制

优化方案:
  1. 使用GraphQL API替代REST API
  2. 一次请求获取多个资源
  3. 减少请求次数到原来的1/10

GraphQL示例:
  query {
    repository(owner:"python", name:"cpython") {
      name
      description
      stargazerCount
      forkCount
    }
  }


============================================================
错误代码快速参考
============================================================

┌──────┬─────────────────────┬───────────────────────┬──────────────────┐
│ 代码 │  错误类型           │   常见原因            │   解决方案       │
├──────┼─────────────────────┼───────────────────────┼──────────────────┤
│ 401  │ Unauthorized        │ 未提供Token           │ 配置Token        │
│ 403  │ Forbidden           │ Token权限不足         │ 增加Token权限    │
│ 403  │ Rate Limit          │ 请求频率超限          │ 使用认证Token    │
│ 404  │ Not Found           │ 资源不存在或无权限    │ 检查权限和路径   │
│ 422  │ Validation Failed   │ 参数格式错误          │ 修正请求参数     │
│ 500  │ Internal Error      │ GitHub服务器错误      │ 稍后重试         │
│ 502  │ Bad Gateway         │ 网关错误              │ 检查网络         │
│ 503  │ Service Unavailable │ 服务暂时不可用        │ 稍后重试         │
└──────┴─────────────────────┴───────────────────────┴──────────────────┘


============================================================
实际复现步骤
============================================================

要在你的环境中复现这些错误,可以:

【步骤 1: 复现 401 错误】
1. 确保未配置GitHub Token
2. 运行: python3 github_mcp_demo.py
3. 尝试调用任何需要认证的工具
4. 观察到 "Bad credentials" 错误

【步骤 2: 复现 403 权限不足】
1. 创建一个仅有 public_repo 权限的Token
2. 尝试创建私有仓库
3. 观察到 "Resource not accessible" 错误

【步骤 3: 复现 403 速率限制】
1. 在未认证状态下
2. 循环调用搜索API超过60次
3. 观察到 "Rate limit exceeded" 错误

【步骤 4: 复现 404 权限隐藏】
1. 尝试访问一个你无权访问的私有仓库
2. 观察到 "Not Found" 错误(实际是权限问题)


============================================================
总结
============================================================

✅ 已复现的错误类型:
  • 401 Unauthorized - 未提供认证凭据
  • 403 Forbidden - Token权限范围不足
  • 403 Rate Limit - API调用频率超限
  • 404 Not Found - 隐藏的权限问题
  • 422 Validation Failed - 参数验证失败

🔑 关键要点:
  • 大多数GitHub MCP工具都需要认证
  • Token必须具有相应的权限范围(Scopes)
  • 未认证用户每小时仅60次请求限制
  • 404错误可能隐藏真实的权限问题
  • 使用fetch工具可作为公开资源的降级方案

📝 行动建议:
  1. 立即访问 https://github.com/settings/tokens
  2. 生成新的Personal Access Token
  3. 勾选权限: repo, workflow, read:org
  4. 在项目中配置Token(使用环境变量保护)
  5. 定期检查和更新Token权限

============================================================
文档结束
============================================================
